{"version":3,"sources":["util/Spotify.js","components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","onChange","className","placeholder","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","alt","height","src","image","name","artist","album","substring","controls","volume","preview","renderAction","TrackList","tracks","map","key","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","preview_url","images","url","savePlaylist","trackUris","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","playlist","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f563634f.chunk.js","sourcesContent":["const clientId = '';\r\nconst redirectUri = 'https://jammming-proj.surge.sh';\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n        if(accessToken){\r\n            return accessToken;\r\n        } \r\n\r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n        if (accessTokenMatch && expiresInMatch) {\r\n            accessToken = accessTokenMatch[1];\r\n            const expiresIn = Number(expiresInMatch[1]);\r\n\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n            return accessToken;\r\n        } else {\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n\r\n    search(term) {\r\n        const accessToken = Spotify.getAccessToken();\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n               headers: {\r\n                    Authorization: `Bearer ${accessToken}`\r\n               }\r\n        }).then(response  => {\r\n            return response.json();\r\n        }).then(jsonResponse => {\r\n            if (!jsonResponse.tracks) {\r\n                return [];\r\n            }\r\n            return jsonResponse.tracks.items.map(track => ({\r\n                id: track.id,\r\n                name: track.name,\r\n                artist: track.artists[0].name,\r\n                album: track.album.name,\r\n                uri: track.uri,\r\n                preview: track.preview_url,\r\n                image: track.album.images[0].url\r\n            }));\r\n        });    \r\n    },\r\n\r\n    savePlaylist(name, trackUris) {\r\n        if (!name || !trackUris) {\r\n            return;\r\n        }\r\n\r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers = { Authorization: `Bearer ${accessToken}` }\r\n        let userId;\r\n\r\n        return fetch('https://api.spotify.com/v1/me', { headers: headers })\r\n        .then(response => response.json())\r\n        .then(jsonResponse => {\r\n            userId = jsonResponse.id;\r\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\r\n            {\r\n                headers: headers,\r\n                method: 'POST',\r\n                body: JSON.stringify({ name: name })\r\n            }).then(response => response.json()\r\n            ).then(jsonResponse => {\r\n                const playlistId = jsonResponse.id;\r\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, \r\n                { \r\n                    headers: headers,\r\n                    method: 'POST',\r\n                    body: JSON.stringify({ uris: trackUris })\r\n                }\r\n                )\r\n            })\r\n        })\r\n    }\r\n    \r\n}\r\n\r\nexport default Spotify;\r\n","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            term: ''\r\n        }\r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n    }\r\n    \r\n    search() {\r\n        this.props.onSearch(this.state.term)\r\n    }\r\n    \r\n    handleTermChange(event) {\r\n        this.setState({ term: event.target.value })\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div onChange={this.handleTermChange} className=\"SearchBar\">\r\n                <input placeholder=\"Enter A Song, Album, or Artist\" />\r\n                <button onClick={this.search} className=\"SearchButton\">SEARCH</button>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n    }\r\n    \r\n    renderAction() {\r\n        if (this.props.isRemoval){\r\n            return <button onClick={this.removeTrack} className=\"Track-action\">-</button>\r\n        } else {\r\n            return <button onClick={this.addTrack} className=\"Track-action\">+</button>\r\n        }\r\n    }\r\n\r\n    addTrack() {\r\n        this.props.onAdd(this.props.track);\r\n    }\r\n\r\n    removeTrack() {\r\n        this.props.onRemove(this.props.track)\r\n    };\r\n    \r\n    render() {\r\n        return(\r\n            <div className=\"Track\">\r\n                <img className=\"Album-image\" alt=\"album cover\" height='50px' src={this.props.track.image} />\r\n                <div className=\"Track-information\">\r\n                    <h3>{this.props.track.name}</h3>\r\n                    <p>{this.props.track.artist} | {this.props.track.album.substring(0, 30)}</p>\r\n                </div>\r\n                <div className=\"Audio-player\">\r\n                    <audio controls volume=\"0.1\" name=\"media\" src={this.props.track.preview}></audio>\r\n                </div>\r\n                {this.renderAction()}\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Track;","import React from 'react';\r\nimport './TrackList.css';\r\nimport Track from '../Track/Track';\r\n\r\nclass TrackList extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className=\"TrackList\">\r\n                {\r\n                    this.props.tracks.map(track => {\r\n                        return <Track onRemove={this.props.onRemove} \r\n                        isRemoval={this.props.isRemoval} \r\n                        onAdd={this.props.onAdd} \r\n                        track={track} \r\n                        key={track.id} />\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default TrackList;","import React from 'react';\r\nimport './SearchResults.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass SearchResults extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} \r\n                isRemoval={false} />\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default SearchResults;","import React from 'react';\r\nimport './Playlist.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass Playlist extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n    \r\n    handleNameChange(event) {\r\n        this.props.onNameChange(event.target.value);\r\n    }\r\n    \r\n    render() {\r\n        return(\r\n            <div className=\"Playlist\">\r\n                <input defaultValue={\"New Playlist\"} onChange={this.handleNameChange} />\r\n                    <TrackList onRemove={this.props.onRemove} \r\n                    isRemoval={true} \r\n                    tracks={this.props.playlistTracks} />\r\n                <button onClick={this.props.onSave} className=\"Playlist-save\">SAVE TO SPOTIFY</button>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Playlist;","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults.js';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchResults: [],\n      playlistName: 'New Playlist',\n      playlistTracks: []\n    };\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)){\n      return;\n    }\n\n    tracks.push(track);\n    this.setState({ playlistTracks: tracks });\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n      \n    this.setState({ playlistTracks: tracks });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({ playlistName: name });\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      })\n    })  \n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({ searchResults: searchResults });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar  onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults onAdd={this.addTrack} searchResults={this.state.searchResults} />\n            <Playlist onSave={this.savePlaylist}\n            onNameChange={this.updatePlaylistName}\n            onRemove={this.removeTrack} \n            playlist={this.state.playlistName} \n            playlistTracks={this.state.playlistTracks} />\n          </div>\n        </div>\n      </div>\n  )};\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}